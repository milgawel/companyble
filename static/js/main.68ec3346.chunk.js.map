{"version":3,"sources":["assets/image.png","theme/GlobalStyle.js","templates/MainTemplate/MainTemplate.js","templates/MainTemplate/index.js","components/Row/Row.js","components/Row/index.js","components/Table/Table.js","components/Table/index.js","Root.js","index.js"],"names":["module","exports","GlobalStyle","createGlobalStyle","Wrapper","styled","div","MainTemplate","children","StyledRecord","th","Row","id","name","city","totalIncomes","avgIncomes","lastMonthIncomes","style","width","TableWrapper","StyledTable","table","StyledRowHeader","tr","StyledRowInput","StyledSortRecord","arrows","StyledInput","input","StyledParagraph","p","StyledSelect","select","Table","state","this","props","sortingFunc","filterFunc","handleTablePage","pageList","positions","array","integer","pageListArray","i","push","createArray","data-column","onClick","e","sign","setState","prevState","data-filter","onChange","placeholder","map","item","key","incomes","value","React","Component","Root","companies","filteredCompanies","offset","calculateTotalIncomes","arrayOfIncomes","totalIncome","length","parseFloat","Math","round","calculateAverageIncomes","avgIncome","calculateLastMonthIncome","lastMonthIncome","date","Date","thisYear","getFullYear","prevMonth","getMonth","month","substring","year","console","log","fetchCompaniesDataFromServer","fetch","then","response","json","data","completeData","sort","a","b","localeCompare","catch","err","parseInt","target","handleSorting","sortType","getAttribute","newArrayToSort","filteredNewArrayToSort","dynamicSort","property","sortOrder","handleInputFilter","toString","toLowerCase","type","filter","obj","includes","slice","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.68ec3346.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image.ed8573af.png\";","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n\r\n  *,*::after,*::before{\r\n  margin:0;\r\n  padding:0;\r\n  box-sizing:border-box;\r\n  }\r\n\r\n  html{\r\n  font-family: 'Montserrat', sans-serif;\r\n    }\r\n  \r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport GlobalStyle from 'theme/GlobalStyle';\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100vw;\r\n  min-height: 100vh;\r\n  background-image: linear-gradient(to right bottom, #bb45ff, #f2d2d2);\r\n`;\r\n\r\nconst MainTemplate = ({ children }) => (\r\n  <Wrapper>\r\n    <GlobalStyle />\r\n    {children}\r\n  </Wrapper>\r\n);\r\n\r\nexport default MainTemplate;\r\n","import MainTemplate from './MainTemplate';\r\n\r\nexport default MainTemplate;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst StyledRecord = styled.th`\r\n  border-bottom: 2px solid white;\r\n  padding-top: 5px;\r\n  padding-bottom: 5px;\r\n  background: lightgray;\r\n  font-size: 15px;\r\n  @media (max-width: 420px) {\r\n    padding-top: 3.5px;\r\n    padding-bottom: 3.5px;\r\n    font-size: 13.5px;\r\n  }\r\n`;\r\n\r\nconst Row = ({\r\n  id,\r\n  name,\r\n  city,\r\n  totalIncomes,\r\n  avgIncomes,\r\n  lastMonthIncomes,\r\n}) => {\r\n  return (\r\n    <tr>\r\n      <StyledRecord style={{ width: '10%' }}>{id}</StyledRecord>\r\n      <StyledRecord>{name}</StyledRecord>\r\n      <StyledRecord>{city}</StyledRecord>\r\n      <StyledRecord>{totalIncomes}</StyledRecord>\r\n      <StyledRecord>{avgIncomes}</StyledRecord>\r\n      <StyledRecord>{lastMonthIncomes}</StyledRecord>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default Row;\r\n","import Row from './Row';\r\n\r\nexport default Row;\r\n","import React from 'react';\r\nimport Row from 'components/Row';\r\nimport styled from 'styled-components';\r\nimport arrows from 'assets/image.png';\r\n\r\nconst Wrapper = styled.div`\r\n  width: 100vw;\r\n  padding: 20px;\r\n  @media (max-width: 420px) {\r\n    padding: 10px;\r\n  }\r\n`;\r\n\r\nconst TableWrapper = styled.div`\r\n  width: 100%;\r\n  overflow-x: auto;\r\n`;\r\n\r\nconst StyledTable = styled.table`\r\n  min-width: 900px;\r\n  max-width: 1400px;\r\n  table-layout: fixed;\r\n  background-color: white;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  border: 3px solid black;\r\n`;\r\n\r\nconst StyledRowHeader = styled.tr`\r\n  width: 100%;\r\n  background-color: #334960;\r\n  color: white;\r\n`;\r\n\r\nconst StyledRowInput = styled.tr`\r\n  background-image: linear-gradient(to bottom, #334960, lightgrey);\r\n`;\r\n\r\nconst StyledSortRecord = styled.th`\r\n  border: 2px solid #334960;\r\n  padding: 5px 30px 5px 10px;\r\n  min-width: 60px;\r\n  cursor: pointer;\r\n  background-image: url(${arrows});\r\n  background-repeat: no-repeat;\r\n  background-size: 23px;\r\n  background-position: 95% 50%;\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  color: black;\r\n  background-color: transparent;\r\n  width: 100%;\r\n  min-width: 60px;\r\n  padding: 5px;\r\n  text-align: center;\r\n  font-size: 15px;\r\n  border: none;\r\n  ::placeholder {\r\n    color: black;\r\n  }\r\n`;\r\n\r\nconst StyledParagraph = styled.p`\r\n  width: 150px;\r\n  position: relative;\r\n  display: block;\r\n  margin-left: 10px;\r\n  margin-right: auto;\r\n  margin-top: 10px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst StyledSelect = styled.select`\r\n  height: 22px;\r\n  transform: translateY(-2px);\r\n`;\r\n\r\nclass Table extends React.Component {\r\n  // table describing if sorting will be ascending or descendig\r\n  state = {\r\n    id: false,\r\n    name: true,\r\n    city: true,\r\n    totalIncomes: true,\r\n    avgIncomes: true,\r\n    lastMonthIncomes: true,\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      children,\r\n      sortingFunc,\r\n      filterFunc,\r\n      handleTablePage,\r\n      positions,\r\n    } = this.props;\r\n\r\n    const pageList = positions / 15;\r\n\r\n    const createArray = (integer) => {\r\n      let pageListArray = [];\r\n      for (let i = 1; i < integer + 1; i++) {\r\n        pageListArray.push(i);\r\n      }\r\n      return pageListArray;\r\n    };\r\n    const array = createArray(pageList);\r\n\r\n    return (\r\n      <Wrapper>\r\n        <TableWrapper>\r\n          <StyledTable>\r\n            <tbody>\r\n              <StyledRowHeader>\r\n                <StyledSortRecord\r\n                  style={{ width: '7%' }}\r\n                  data-column=\"id\"\r\n                  onClick={(e) => {\r\n                    let sign = this.state.id ? '+' : '-';\r\n                    sortingFunc(e, sign);\r\n                    this.setState((prevState) => ({\r\n                      id: !prevState.id,\r\n                    }));\r\n                  }}\r\n                >\r\n                  id\r\n                </StyledSortRecord>\r\n                <StyledSortRecord\r\n                  data-column=\"name\"\r\n                  onClick={(e) => {\r\n                    let sign = this.state.name ? '+' : '-';\r\n                    sortingFunc(e, sign);\r\n                    this.setState((prevState) => ({\r\n                      name: !prevState.name,\r\n                    }));\r\n                  }}\r\n                >\r\n                  name\r\n                </StyledSortRecord>\r\n                <StyledSortRecord\r\n                  style={{ width: '20%' }}\r\n                  data-column=\"city\"\r\n                  onClick={(e) => {\r\n                    let sign = this.state.city ? '+' : '-';\r\n                    sortingFunc(e, sign);\r\n                    this.setState((prevState) => ({\r\n                      city: !prevState.city,\r\n                    }));\r\n                  }}\r\n                >\r\n                  city\r\n                </StyledSortRecord>\r\n                <StyledSortRecord\r\n                  style={{ width: '13%' }}\r\n                  data-column=\"totalIncomes\"\r\n                  onClick={(e) => {\r\n                    let sign = this.state.totalIncomes ? '+' : '-';\r\n                    sortingFunc(e, sign);\r\n                    this.setState((prevState) => ({\r\n                      totalIncomes: !prevState.totalIncomes,\r\n                    }));\r\n                  }}\r\n                >\r\n                  total income\r\n                </StyledSortRecord>\r\n                <StyledSortRecord\r\n                  style={{ width: '15%' }}\r\n                  data-column=\"avgIncomes\"\r\n                  onClick={(e) => {\r\n                    let sign = this.state.avgIncomes ? '+' : '-';\r\n                    sortingFunc(e, sign);\r\n                    this.setState((prevState) => ({\r\n                      avgIncomes: !prevState.avgIncomes,\r\n                    }));\r\n                  }}\r\n                >\r\n                  average income\r\n                </StyledSortRecord>\r\n                <StyledSortRecord\r\n                  style={{ width: '17%' }}\r\n                  data-column=\"lastMonthIncomes\"\r\n                  onClick={(e) => {\r\n                    let sign = this.state.lastMonthIncomes ? '+' : '-';\r\n                    sortingFunc(e, sign);\r\n                    this.setState((prevState) => ({\r\n                      lastMonthIncomes: !prevState.lastMonthIncomes,\r\n                    }));\r\n                  }}\r\n                >\r\n                  last month income\r\n                </StyledSortRecord>\r\n              </StyledRowHeader>\r\n              <StyledRowInput>\r\n                <th>\r\n                  <StyledInput\r\n                    data-filter=\"id\"\r\n                    onChange={(e) => filterFunc(e)}\r\n                    placeholder=\"filter\"\r\n                  />\r\n                </th>\r\n                <th>\r\n                  <StyledInput\r\n                    data-filter=\"name\"\r\n                    onChange={(e) => filterFunc(e)}\r\n                    placeholder=\"filter\"\r\n                  />\r\n                </th>\r\n                <th>\r\n                  <StyledInput\r\n                    data-filter=\"city\"\r\n                    onChange={(e) => filterFunc(e)}\r\n                    placeholder=\"filter\"\r\n                  />\r\n                </th>\r\n                <th>\r\n                  <StyledInput\r\n                    data-filter=\"totalIncomes\"\r\n                    onChange={(e) => filterFunc(e)}\r\n                    placeholder=\"filter\"\r\n                  />\r\n                </th>\r\n                <th>\r\n                  <StyledInput\r\n                    data-filter=\"avgIncomes\"\r\n                    onChange={(e) => filterFunc(e)}\r\n                    placeholder=\"filter\"\r\n                  />\r\n                </th>\r\n                <th>\r\n                  <StyledInput\r\n                    data-filter=\"totalIncomes\"\r\n                    onChange={(e) => filterFunc(e)}\r\n                    placeholder=\"filter\"\r\n                  />\r\n                </th>\r\n              </StyledRowInput>\r\n              {children.map((item) => {\r\n                return (\r\n                  <Row\r\n                    key={item.id}\r\n                    id={item.id}\r\n                    name={item.name}\r\n                    city={item.city}\r\n                    incomes={item.incomes}\r\n                    totalIncomes={item.totalIncomes}\r\n                    avgIncomes={item.avgIncomes}\r\n                    lastMonthIncomes={item.lastMonthIncomes}\r\n                  />\r\n                );\r\n              })}\r\n            </tbody>\r\n          </StyledTable>\r\n        </TableWrapper>\r\n        <StyledParagraph>\r\n          Page{' '}\r\n          <StyledSelect id=\"pages\" onChange={handleTablePage}>\r\n            {array.map((item) => (\r\n              <option value={item * 15 - 15} key={item}>\r\n                {item}\r\n              </option>\r\n            ))}\r\n          </StyledSelect>{' '}\r\n          of {pageList}\r\n        </StyledParagraph>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;\r\n","import Table from './Table';\r\n\r\nexport default Table;\r\n","import React from 'react';\r\nimport MainTemplate from 'templates/MainTemplate';\r\nimport Table from 'components/Table';\r\n\r\nclass Root extends React.Component {\r\n  state = {\r\n    companies: [],\r\n    filteredCompanies: [],\r\n    offset: 0,\r\n  };\r\n\r\n  calculateTotalIncomes = (arrayOfIncomes) => {\r\n    let totalIncome = 0;\r\n\r\n    for (let i = 0; i < arrayOfIncomes.length; i++) {\r\n      totalIncome += parseFloat(arrayOfIncomes[i].value, 10);\r\n    }\r\n    totalIncome = Math.round(totalIncome * 100) / 100;\r\n\r\n    return totalIncome;\r\n  };\r\n\r\n  calculateAverageIncomes = (arrayOfIncomes) => {\r\n    let avgIncome = 0;\r\n\r\n    for (let i = 0; i < arrayOfIncomes.length; i++) {\r\n      avgIncome += parseFloat(arrayOfIncomes[i].value, 10);\r\n    }\r\n\r\n    avgIncome = avgIncome / arrayOfIncomes.length;\r\n\r\n    avgIncome = Math.round(avgIncome * 100) / 100;\r\n\r\n    return avgIncome;\r\n  };\r\n\r\n  calculateLastMonthIncome = (arrayOfIncomes) => {\r\n    let lastMonthIncome = 0;\r\n    const date = new Date();\r\n    const thisYear = date.getFullYear();\r\n    let prevMonth = date.getMonth();\r\n    if (prevMonth < 10) prevMonth = `0${prevMonth}`;\r\n\r\n    for (let i = 0; i < arrayOfIncomes.length; i++) {\r\n      const month = arrayOfIncomes[i].date.substring(5, 7);\r\n      const year = arrayOfIncomes[i].date.substring(0, 4);\r\n\r\n      if (month === prevMonth && year === thisYear) {\r\n        console.log(`[year = thisyear]${year} ===${thisYear}`);\r\n        console.log(`[arrayOfIncomes[i].date] ${arrayOfIncomes[i].date}`);\r\n        console.log(`[month = actualMonth]${month} ===${prevMonth}`);\r\n        lastMonthIncome += parseFloat(arrayOfIncomes[i].value, 10);\r\n      }\r\n    }\r\n    return lastMonthIncome;\r\n  };\r\n\r\n  fetchCompaniesDataFromServer = () => {\r\n    fetch('https://recruitment.hal.skygate.io/companies')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        let completeData = data;\r\n        completeData.sort(function (a, b) {\r\n          return a.id - b.id || a.name.localeCompare(b.name);\r\n        });\r\n\r\n        for (let i = 0; i < data.length; i++) {\r\n          fetch(`https://recruitment.hal.skygate.io/incomes/${data[i].id}`)\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n              completeData[i].incomes = [...data.incomes];\r\n\r\n              completeData[i].totalIncomes = this.calculateTotalIncomes(\r\n                completeData[i].incomes,\r\n              );\r\n\r\n              completeData[i].avgIncomes = this.calculateAverageIncomes(\r\n                completeData[i].incomes,\r\n              );\r\n              completeData[i].lastMonthIncomes = this.calculateLastMonthIncome(\r\n                completeData[i].incomes,\r\n              );\r\n              this.setState({\r\n                companies: completeData,\r\n              });\r\n            })\r\n            .catch((err) => console.log(err));\r\n        }\r\n\r\n        this.setState({\r\n          companies: completeData,\r\n        });\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchCompaniesDataFromServer();\r\n  }\r\n\r\n  handleTablePage = (e) => {\r\n    this.setState({\r\n      offset: parseInt(e.target.value),\r\n    });\r\n  };\r\n\r\n  handleSorting = (e, sign) => {\r\n    let sortType = e.target.getAttribute('data-column');\r\n    let newArrayToSort = this.state.companies;\r\n    let filteredNewArrayToSort = this.state.filteredCompanies;\r\n\r\n    function dynamicSort(property) {\r\n      let sortOrder = 1;\r\n      if (sign === '-') {\r\n        sortOrder = -1;\r\n      }\r\n\r\n      return function (a, b) {\r\n        const result =\r\n          a[property] < b[property] ? -1 : a[property] > b[property] ? 1 : 0;\r\n        return result * sortOrder;\r\n      };\r\n    }\r\n\r\n    newArrayToSort.sort(dynamicSort(sortType));\r\n    filteredNewArrayToSort.sort(dynamicSort(sortType));\r\n\r\n    this.setState({\r\n      companies: newArrayToSort,\r\n      filteredCompanies: filteredNewArrayToSort,\r\n    });\r\n  };\r\n\r\n  handleInputFilter = (e) => {\r\n    const { companies } = this.state;\r\n    const input = e.target.value.toString().toLowerCase();\r\n    console.log(input);\r\n    const type = e.target.getAttribute('data-filter');\r\n\r\n    if (input.length > 0) {\r\n      const filteredCompanies = companies.filter((obj) =>\r\n        obj[type].toString().toLowerCase().includes(input),\r\n      );\r\n      this.setState({\r\n        filteredCompanies,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        filteredCompanies: [],\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { companies, filteredCompanies, offset } = this.state;\r\n    return (\r\n      <MainTemplate>\r\n        <Table\r\n          filterFunc={this.handleInputFilter}\r\n          sortingFunc={this.handleSorting}\r\n          positions={this.state.companies.length}\r\n          handleTablePage={this.handleTablePage}\r\n        >\r\n          {filteredCompanies.length > 0\r\n            ? filteredCompanies.slice(offset, offset + 15)\r\n            : companies.slice(offset, offset + 15)}\r\n        </Table>\r\n      </MainTemplate>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Root;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Root from './Root';\r\n\r\nReactDOM.render(<Root />, document.getElementById('root'));\r\n"],"sourceRoot":""}